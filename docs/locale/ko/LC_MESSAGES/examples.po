# 
msgid ""
msgstr ""
"Project-Id-Version: KoNLPy 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-19 15:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../examples.rst:2
msgid "Examples"
msgstr "사용 예시"

#: ../../examples.rst:4
msgid "Below are a set of example tasks using KoNLPy."
msgstr "다음은 KoNLPy를 이용해 수행할 수 있는 몇몇 사용 예시입니다."

#: ../../examples.rst:20
msgid ":doc:`examples/explore`"
msgstr ""

#: ../../examples.rst:26
msgid ":doc:`examples/wordcloud`"
msgstr ""

#: ../../examples.rst:32
msgid ":doc:`examples/collocations`"
msgstr ""

#: ../../examples/collocations.rst:2
msgid "Finding collocations"
msgstr "연어(collocation) 찾기"

#: ../../examples/collocations.rst:4
msgid "We can find collocations with the help of `NLTK <http://nltk.org>`_."
msgstr "`NLTK <http://nltk.org>`_ 를 같이 활용하여 연어(collocation)을 찾을 수 있습니다."

#: ../../examples/collocations.rst:9 ../../examples/explore.rst:13
msgid "Console::"
msgstr "출력 결과::"

#: ../../examples/explore.rst:2
msgid "Exploring a document"
msgstr "문서 탐색하기"

#: ../../examples/explore.rst:4
msgid "Exploring a document can consist of various components:"
msgstr "처음 문서를 탐색할 때는 다양한 것을 확인해볼 수 있습니다:"

#: ../../examples/explore.rst:6
msgid "Counts (characters, words, etc.)"
msgstr "개수 세기 (문자, 단어 등)"

#: ../../examples/explore.rst:7
msgid "Checking Zipf's laws: :math:`fr=k`"
msgstr "지프의 법칙(Zipf's laws) 확인해보기: :math:`fr=k`"

#: ../../examples/explore.rst:8
msgid "Concordances"
msgstr "용례 찾기"

#: ../../examples/explore.rst:55
msgid "zipf.png:"
msgstr ""

#: ../../examples/wordcloud.rst:2
msgid "Drawing a word cloud"
msgstr "워드클라우드 그리기"

#: ../../examples/wordcloud.rst:4
msgid ""
"Below shows a code example that crawls a National Assembly bill from the "
"web, extract nouns and draws a word cloud - from head to tail in Python."
msgstr "다음은 파이썬만으로 웹에서 국회 의안의 내용을 수집해서 이용해 명사를 추출한 후, 워드클라우드를 그리는 예시입니다."

#: ../../examples/wordcloud.rst:6
msgid ""
"You can change the bill number (i.e., ``bill_num``), and see how the word "
"clouds differ per bill. (ex: '1904882', '1904883', 'ZZ19098', etc)"
msgstr ""
"의안 번호(i.e., ``bill_num``)를 바꿔가며 워드클라우드가 어떻게 달라지는지 확인할수도 있습니다. (ex: "
"'1904882', '1904883', 'ZZ19098', etc)"

#: ../../examples/wordcloud.rst:13
msgid ""
"The `PyTagCloud <https://pypi.python.org/pypi/pytagcloud>`_ installed in "
"PyPI may not be sufficient for drawing wordclouds in Korean. You may add "
"eligible fonts - that support the Korean language - manually, or install the"
" Korean supported version `here <https://github.com/e9t/PyTagCloud>`_."
msgstr ""
"PyPI에 업로드되어 있는 `PyTagCloud <https://pypi.python.org/pypi/pytagcloud>`_ 를 "
"이용하면 워드클라우드에 한글이 제대로 표시되지 않을 수 있습니다. 이 경우, 직접 소스코드에 한글 폰트를 추가하거나, `이 곳 "
"<https://github.com/e9t/PyTagCloud>`_ 에서 미리 폰트가 추가된 버젼을 다운받아 사용하시면 됩니다."

#: ../../examples.rst:7
msgid "Contents"
msgstr "목록보기"

#: ../../examples.rst:16
msgid "Thumbnails"
msgstr "썸네일"

#~ msgid "Twitter sentiment analysis"
#~ msgstr "트위터 센티멘트 분석"

#~ msgid ""
#~ "http://www.laurentluce.com/posts/twitter-sentiment-analysis-using-python-"
#~ "and-nltk/ http://www.sjwhitworth.com/sentiment-analysis-in-python-using-"
#~ "nltk/"
#~ msgstr ""

#~ msgid "Generating corpus specific stopwords"
#~ msgstr ""

#~ msgid ""
#~ "As far as Korean NLP goes, eliminating stopwords may not be as important nor"
#~ " useful as it is in English NLP. However there are some cases where it "
#~ "becomes beneficial:"
#~ msgstr ""

#~ msgid "To identify stopwords in a corpus-specific, or domain-specific manner"
#~ msgstr ""

#~ msgid "To reduce computation in later tasks (such as topic modeling)"
#~ msgstr ""

#~ msgid ""
#~ "An expert with domain knowledge can define such stopwords herself, but there"
#~ " are numerous other computational ways that can easily be employed. One of "
#~ "them is to use the traditional `TF-IDF "
#~ "<http://en.wikipedia.org/wiki/Tf%E2%80%93idf>`_ calculations. TF-IDF was "
#~ "originally developed in order to score and rank a document's relevance to a "
#~ "given query in search engines. However, given its ability in ranking highly "
#~ "significant words of a document, it can also be applied to finding "
#~ "stopwords; just by reversing the list of words."
#~ msgstr ""

#~ msgid ""
#~ "In this perspective, the example below derives the top 10 most and least "
#~ "significant words of a corpus using TF-IDF. Particularly, the TF-IDF "
#~ "statistics are calculated with the `Gensim "
#~ "<http://radimrehurek.com/gensim/>`_."
#~ msgstr ""

#~ msgid "This is a code made easy for instruction and not thorougly optimized."
#~ msgstr ""
