# 
msgid ""
msgstr ""
"Project-Id-Version: KoNLPy 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-19 15:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../examples.rst:2
msgid "Examples"
msgstr ""

#: ../../examples.rst:4
msgid "Below are a set of example tasks using KoNLPy."
msgstr ""

#: ../../examples.rst:8
msgid ":doc:`examples/explore`"
msgstr ""

#: ../../examples.rst:14
msgid ":doc:`examples/wordcloud`"
msgstr ""

#: ../../examples.rst:20
msgid ":doc:`examples/collocations`"
msgstr ""

#: ../../examples/collocations.rst:2
msgid "Finding collocations"
msgstr ""

#: ../../examples/collocations.rst:4
msgid "We can find collocations with the help of `NLTK <http://nltk.org>`_."
msgstr ""

#: ../../examples/collocations.rst:9 ../../examples/explore.rst:13
#: ../../examples/stopwords.rst:31
msgid "Console::"
msgstr ""

#: ../../examples/explore.rst:2
msgid "Exploring a document"
msgstr ""

#: ../../examples/explore.rst:4
msgid "Exploring a document can consist of various components:"
msgstr ""

#: ../../examples/explore.rst:6
msgid "Counts (characters, words, etc.)"
msgstr ""

#: ../../examples/explore.rst:7
msgid "Checking Zipf's laws: :math:`fr=k`"
msgstr ""

#: ../../examples/explore.rst:8
msgid "Concordances"
msgstr ""

#: ../../examples/explore.rst:55
msgid "zipf.png:"
msgstr ""

#: ../../examples/sentiment.rst:2
msgid "Twitter sentiment analysis"
msgstr ""

#: ../../examples/sentiment.rst:4
msgid ""
"http://www.laurentluce.com/posts/twitter-sentiment-analysis-using-python-"
"and-nltk/ http://www.sjwhitworth.com/sentiment-analysis-in-python-using-"
"nltk/"
msgstr ""

#: ../../examples/stopwords.rst:2
msgid "Generating corpus specific stopwords"
msgstr ""

#: ../../examples/stopwords.rst:4
msgid ""
"As far as Korean NLP goes, eliminating stopwords may not be as important nor"
" useful as it is in English NLP. However there are some cases where it "
"becomes beneficial:"
msgstr ""

#: ../../examples/stopwords.rst:7
msgid "To identify stopwords in a corpus-specific, or domain-specific manner"
msgstr ""

#: ../../examples/stopwords.rst:8
msgid "To reduce computation in later tasks (such as topic modeling)"
msgstr ""

#: ../../examples/stopwords.rst:10
msgid ""
"An expert with domain knowledge can define such stopwords herself, but there"
" are numerous other computational ways that can easily be employed. One of "
"them is to use the traditional `TF-IDF "
"<http://en.wikipedia.org/wiki/Tf%E2%80%93idf>`_ calculations. TF-IDF was "
"originally developed in order to score and rank a document's relevance to a "
"given query in search engines. However, given its ability in ranking highly "
"significant words of a document, it can also be applied to finding "
"stopwords; just by reversing the list of words."
msgstr ""

#: ../../examples/stopwords.rst:20
msgid ""
"In this perspective, the example below derives the top 10 most and least "
"significant words of a corpus using TF-IDF. Particularly, the TF-IDF "
"statistics are calculated with the `Gensim "
"<http://radimrehurek.com/gensim/>`_."
msgstr ""

#: ../../examples/stopwords.rst:26
msgid "This is a code made easy for instruction and not thorougly optimized."
msgstr ""

#: ../../examples/wordcloud.rst:2
msgid "Drawing a word cloud"
msgstr ""

#: ../../examples/wordcloud.rst:4
msgid ""
"Below shows a code example that crawls a National Assembly bill from the "
"web, extract nouns and draws a word cloud - from head to tail in Python."
msgstr ""

#: ../../examples/wordcloud.rst:6
msgid ""
"You can change the bill number (i.e., ``bill_num``), and see how the word "
"clouds differ per bill. (ex: '1904882', '1904883', 'ZZ19098', etc)"
msgstr ""

#: ../../examples/wordcloud.rst:13
msgid ""
"The `PyTagCloud <https://pypi.python.org/pypi/pytagcloud>`_ installed in "
"PyPI may not be sufficient for drawing wordclouds in Korean. You may add "
"eligible fonts - that support the Korean language - manually, or install the"
" Korean supported version `here <https://github.com/e9t/PyTagCloud>`_."
msgstr ""
